<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// anti aliasing
display_reset(8, true);

step = -1;      // current "slide" in presentation
length = 200;   // length of line

// center in room
x = room_width * 0.5;
y = room_height * 0.5;

// tween declaration
for(var i = 0; i &lt; 17; i++) {
    step_inc[i] = 0;
}

// background
background_color[0] = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// step incrementing
if (mouse_check_button_pressed(mb_left) &amp;&amp; step &lt; 16) {
    if (step&gt;0) step_inc[step] = 1;
    step++;
}

// tweening logic, special logic for step 10, 360deg rotation
if (step &gt;= 0) {
    if (step != 10) {
        step_inc[step] = lerp(step_inc[step], 1, 0.125);
    } else if (step == 10) {
        step_inc[10] += 1 / 135; 
        if (step_inc[10] &gt;= 2.125) { // 2 &amp; 1/8 rotation around circle
            step = 11;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// yellow highlighter
draw_set_color(c_yellow);
draw_set_alpha(0.75);
draw_circle(mouse_x, mouse_y, 32, false);
draw_set_alpha(1);

// title card
if (step == -1) {
    draw_set_font(f32);
    draw_set_color(c_black);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(room_width * 0.5, room_height * 0.5,
        "A Brief Introduction#to lengthdir#in GameMaker: Studio");
}

// follow points to lengthdir_x,y
if (step == 13) {
    draw_set_color(c_aqua);
    draw_line_width(x + lengthdir_x(length, 45) * step_inc[12], y, x +
        lengthdir_x(length, 45) * step_inc[12], y + lengthdir_y(length, 45) *
        step_inc[13], 3);
    draw_line_width(x, y + lengthdir_y(length, 45) * step_inc[12], x +
        lengthdir_x(length, 45) * step_inc[13], y + lengthdir_y(length, 45) *
        step_inc[12], 3);
}

// 200px
if (step &gt; 3 &amp;&amp; step &lt; 6) {
    draw_set_color(c_red);
    draw_set_valign(fa_bottom);
    draw_text(x + length * 0.5, y - 8, string(length) + "px");
}

// 90degree 200px
if (step &gt; 6 &amp;&amp; step &lt; 9) {
    draw_set_color(c_red);
    draw_set_valign(fa_bottom);
    draw_text_transformed(x - 8, y - length * 0.5, string(length) + "px", 1, 1,
        90);
}

// main point coordinate
if (step &gt; 1 &amp;&amp; step &lt; 16) {
    draw_set_color(c_black);
    draw_set_font(f16);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text(x, y + 8, "(x, y)");
}

// horizontal line
if ((step &gt; 2 &amp;&amp; step &lt; 6) || step == 9) {
    draw_set_color(c_red);
    draw_line_width(x, y, x + (length * step_inc[3]), y, 3);
}

// vertical line
if ((step &gt; 5 &amp;&amp; step &lt; 9) || step == 9) {
    draw_set_color(c_red);
    draw_line_width(x, y, x, y - (length * step_inc[6]), 3);
}

// point end of hor line
if (step &gt; 4 &amp;&amp; step &lt; 6) {
    draw_set_color(c_black);
    draw_set_valign(fa_top);
    draw_circle(x + length, y, 6, false);
    draw_text(x + length, y + 8, "(x + 200, y)");
}

// point end of vert line
if (step &gt; 7 &amp;&amp; step &lt; 9) {
    draw_set_color(c_black);
    draw_set_valign(fa_bottom);
    draw_circle(x, y - length, 6, false);
    draw_text(x, y - length - 8, "(x, y - 200)");
}

// thetas
if (step == 9) {
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_text(x + length + 8, y, "0째");
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text(x, y - length - 8, "90째");
}

// full rotation
if (step == 10) {
    draw_set_color(c_ltgray);
    draw_line_width(x, y, x + length, y, 3);
    draw_set_color(c_red);
    draw_line_width(x, y, x + lengthdir_x(length, 360 * step_inc[10]), y +
        lengthdir_y(length, 360 * step_inc[10]), 3);
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);

    var _str1 = string(round((360 * step_inc[10]) % 360)) + "째";
    var _str2 = "";
    if (step_inc[10] &gt;= 1) {
        _str2 = "(?, ?)";
    }


    draw_set_color(c_black);
    if (step_inc[10] &gt;= 1) {
        draw_text(x + lengthdir_x(length, 360 * step_inc[10]), y + lengthdir_y(
            length, 360 * step_inc[10]) - 8, _str2);
        draw_circle(x + lengthdir_x(length, 360 * step_inc[10]), y +
            lengthdir_y(length, 360 * step_inc[10]), 6, false);
    }

    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);
    draw_text(x + 20, y, _str1);
}

// 45 deg
if (step == 11 || step = 12 || step == 13 || step == 14) {
    draw_set_color(c_ltgray);
    draw_line_width(x, y, x + length, y, 3);
    ang = 45;
    draw_set_color(c_red);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text_transformed(x + lengthdir_x(length * 0.5, ang), y + lengthdir_y(
        length * 0.5, ang) - 8, "200px", 1, 1, ang);
    draw_line_width(x, y, x + lengthdir_x(length, ang), y + lengthdir_y(length,
        ang), 3);
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);

    var _str = "(x + lengthdir_x(len, dir),# y + lengthdir_y(len, dir))";
    if (step == 14) _str =
        "(x + lengthdir_x(200, 45),# y + lengthdir_y(200, 45))";

    draw_text(x + lengthdir_x(length, ang), y + lengthdir_y(length, ang) - 8,
        _str);

    draw_set_color(c_black);
    draw_circle(x + lengthdir_x(length, ang), y + lengthdir_y(length, ang), 6,
        false);
}

// lengthdir x line
if (step &gt;= 12 &amp;&amp; step &lt;= 14) {
    draw_set_color(c_blue);
    draw_line_width(x, y, x + lengthdir_x(length, 45) * step_inc[12], y, 3)
    draw_set_halign(fa_right);
    draw_set_valign(fa_top);
    draw_text(x + lengthdir_x(length, 45) * step_inc[12], y + 8, "lengthdir_x");
}

// 45 degree drawing
if (step &gt;= 11 &amp;&amp; step &lt; 15) {
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);
    draw_text(x + 20, y, "45째");
}

// lengthdir y line
if (step == 13 || step == 14) {
    draw_set_color(c_blue);
    draw_line_width(x, y, x, y + lengthdir_y(length, 45) * step_inc[13], 3)
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_text_transformed(x - 8, y + lengthdir_y(length, 45) * step_inc[13],
        "lengthdir_y", 1, 1, 90);
}

// main point
if (step &gt; 0 &amp;&amp; step &lt; 15) {
    draw_set_color(c_black);
    draw_circle(x, y, 6 * step_inc[1], false);
}

// putting it all together
if (step == 15 || step == 16) {

    // simple movement
    if (step == 16) {
        length = 112;
        if (keyboard_check(ord("W"))) y -= 8;
        if (keyboard_check(ord("A"))) x -= 8;
        if (keyboard_check(ord("S"))) y += 8;
        if (keyboard_check(ord("D"))) x += 8;
    }

    // create variables to make for less repetitive referencing
    var pc = point_direction(x, y, mouse_x, mouse_y);
    var lx = lengthdir_x(length, pc);
    var ly = lengthdir_y(length, point_direction(x, y, mouse_x, mouse_y));

    // fire projectile
    if (mouse_check_button(mb_right)) {
        var obj = instance_create(x + lengthdir_x(length * 0.75, pc), y +
            lengthdir_y(length * 0.75, pc), obj_bullet);
        obj.direction = point_direction(x, y, mouse_x, mouse_y);
        obj.speed = 32;
    }

    if (step == 15) {
        draw_set_color(c_blue);
        draw_line_width(x, y, x + lx, y, 3)
        draw_line_width(x, y, x, y + ly, 3)
    }

    draw_set_color(c_red);
    draw_line_width(x, y, x + lx, y + ly, 3);

    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);

    // +, - drawing based on value sign
    var b1 = "+";
    var b2 = "+";

    if (lx &lt; 0) b1 = "";
    if (ly &lt; 0) b2 = "";

    // draw coordinates
    var _str = "(x" + string(b1) + string(lx) + ",y" + string(b2) + string(ly) +")";

    if (step == 15) draw_text(x + lx, y + ly - 8, _str);

    // draw circle at updated x, y
    draw_set_color(c_black);
    draw_circle(x, y, 6, false);
}

// restart room
if (keyboard_check_pressed(ord("R"))) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
